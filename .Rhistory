seed=2018; MC=5;
N=300; j=3; l=3; #total number of subgroups: j+j*(l-1)
B=149;
subgrp_mean<-c(0.4, 0.52, 0.34, 0.35, 0.4, 0.332, 0.25, 0.4, 0.35);
respR<-c(0.40, 0.35, 0.25);
P=c(1/3,1/3,1/3); #first randomization rate
Q0=0.5; #assign second randomization for traditional SMART=0.5
QL=0.2;
pIntn=c(0.4, 0.2, 0.2, 0.2); #a vector of proportions of interim sample sizes of total, sum up to 1
K=3; #total number of looks to identify inferior treatment
set.seed(seed)
z1<-matrix(nrow=N,ncol=(j+2))
#Stage 1 allocation indicators
z1[,c(1:3)]<-t(rmultinom(N,1,P))
for(i in 1:j){
z1[which(z1[,i]==1),(j+1)]<-i #Trt Aj
}
z1<-z1[order(z1[,4]),]
#Number of subjects in each first stage group
stg1_grpn<-table(z1[,4])
#Response indicators for 1st allocation
for(i in 1:j){
z1[which(z1[,4]==i),5]<-rbinom(stg1_grpn[[i]],1,respR[[i]])
}
colnames(z1)<-c("z1A1","z1A2","z1A3","z1","resp")
View(z1)
ilook<-sample(1:(1+K), size = N, replace = TRUE, prob = pIntn)
summary(ilook)
tabulate(ilook)
ilook <- vector(NA, length = N)
ilook <- vector(length = N)
for(k in 1:(1+K)){
sindex <- sample(nrow(z1), size = pIntn[k]*N, replace = FALSE)
ilook[sindex] <- k
}
table(ilook)
ilook <- vector("numeric", length = N)
for(k in 1:(1+K)){
sindex <- sample(nrow(z1), size = pIntn[k]*N, replace = FALSE)
ilook[sindex] <- k
}
sdt <- nrow(z1)
sdt <- c(1:N)
ilook <- vector("numeric", length = N)
sdt <- c(1:N)
for(k in 1:(1+K)){
sindex <- sample(sdt, size = pIntn[k]*N, replace = FALSE)
ilook[sindex] <- k
sdt <- sdt[-sindex]
}
ilook <- vector("numeric", length = N)
sdt <- c(1:N)
k=1
sindex <- sample(sdt, size = pIntn[k]*N, replace = FALSE)
sindex
ilook[sindex] <- k
ilook
ilook !=0
rownames(ilook !=0)
which(ilook !=0)
sindex
order(sindex)
max(sindex)
sdt <- sdt[-sindex]
k=2
pIntn[k]*N
sindex <- sample(sdt, size = pIntn[k]*N, replace = FALSE)
sindex
ilook[sindex]
ilook[sindex] <- k
ilook[sindex]
sdt <- sdt[-sindex]
length(sindex)
ilook <- vector("numeric", length = N)
sdt <- c(1:N)
k=1
sindex <- sample(sdt, size = pIntn[k]*N, replace = FALSE)
ilook[sindex] <- k
length(sindex)
ilook[sindex]
sdt != sindex
!(sdt %in% sindex)
sindex
sdt[!(sdt %in% sindex)]
sdt <- sdt[!(sdt %in% sindex)]
k=2
sindex <- sample(sdt, size = pIntn[k]*N, replace = FALSE)
sindex
ilook[sindex] <- k
ilook[sindex]
length(sindex)
!(sdt %in% sindex)
sdt <- sdt[!(sdt %in% sindex)]
for(k in 1:(1+K)){
sindex <- sample(sdt, size = pIntn[k]*N, replace = FALSE)
ilook[sindex] <- k
sdt <- sdt[!(sdt %in% sindex)]
}
ilook <- vector("numeric", length = N)
sdt <- c(1:N)
for(k in 1:(1+K)){
sindex <- sample(sdt, size = pIntn[k]*N, replace = FALSE)
ilook[sindex] <- k
sdt <- sdt[!(sdt %in% sindex)]
}
table(ilook)
which(ilook==1)
#Check the treatment distribution in burn-in sample
z1[which(ilook==1), "z1"]
#Check the treatment distribution in burn-in sample
table(z1[which(ilook==1), "z1"])
unique(z1[which(ilook==1), "z1"])
#Check the treatment distribution in burn-in sample
unique(z1[which(ilook==1), "z1"]) = c(1,2,3)
#Check the treatment distribution in burn-in sample
unique(z1[which(ilook==1), "z1"]) == c(1,2,3)
k=1
iSample <- z1[which(ilook == k)]
iSample <- z1[which(ilook == k),]
View(iSample)
aggregate(iSample[,"resp"], iSample[,"z1"], mean)
aggregate(iSample[,"resp"], list(iSample[,"z1"]), mean)
iInferior <- vector("numeric", length = K)
iResp[1, which.min(iResp[,2])]
iResp <- aggregate(iSample[,"resp"], list(iSample[,"z1"]), mean)
iResp[1, which.min(iResp[,2])]
which.min(iResp[,2]
)
iInferior[k] <- iResp[which.min(iResp[,2]), 1]
iInferior
iInferior <- vector("numeric", length = K)
for(k in 1:K){
iSample <- z1[which(ilook == k),]
iResp <- aggregate(iSample[,"resp"], list(iSample[,"z1"]), mean)
iInferior[k] <- iResp[which.min(iResp[,2]), 1]
}
iInferior
## Specify libraries
#install.packages("MASS")
#require(MASS) # Random sample from MVN
#install.packages("mvtnorm")
require(mvtnorm) # Quantiles of MVN
## Specify generic path
gen.path = "C:/Users/wangj/Documents/Academic/PhD Dissertation/02_Optimal RA-SMART"
setwd("~/Academic/Github")
setwd("~/Academic/Github/RASMART")
install.packages("smog")
library(smog)
install.packages("smog")
library(smog)
install.packages("glue")
library(smog)
document()
library(devtools)
detach("package:devtools", unload = TRUE)
library(devtools)
devtools::document()
devtools::check()
